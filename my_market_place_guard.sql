-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
-- INSERT INTO og.users (u_name) VALUES ('port');
-- select * from og.users;
ROLLBACK TRANSACTION;

BEGIN;
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_roles') THEN
        create type user_roles AS ENUM (
    'BUYER',
    'SELLER',
    'ARBITER',
    'STAFF',
    'ADMIN'
);

    END IF;
END
$$;


-- CREATE TYPE IF NOT EXISTS user_roles AS ENUM (
--     'BUYER',
--     'SELLER',
--     'ARBITER',
--     'STAFF',
--     'ADMIN'
-- );

CREATE TABLE IF NOT EXISTS og.users
(
    id serial NOT NULL UNIQUE,
    u_name character varying(15) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.products
(
    id serial NOT NULL UNIQUE,
    title character varying(50) NOT NULL,
    user_id_fk integer REFERENCES og.users(id) ON DELETE CASCADE NOT NULL,
    photo_num smallint NOT NULL DEFAULT 1,
    created_date date NOT NULL,
    price integer NOT NULL,
    saved smallint NOT NULL DEFAULT 2,
    condition smallint NOT NULL DEFAULT 1,
    carrier smallint NOT NULL DEFAULT 2,
    status smallint NOT NULL,
    cover_photo_url character varying(40), 
    currency character varying(3),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.phones
(
    id serial NOT NULL UNIQUE,
    model smallint NOT NULL,
    user_id_fk integer REFERENCES og.users(id) ON DELETE CASCADE NOT NULL,
    photo_num smallint NOT NULL DEFAULT 1,
    created_date date NOT NULL,
    price integer NOT NULL,
    saved smallint NOT NULL DEFAULT 2,
    condition smallint NOT NULL DEFAULT 1,
    carrier smallint NOT NULL DEFAULT 2,
    status smallint NOT NULL,
    cover_photo_url character varying(40), 
    currency character varying(3),
    PRIMARY KEY (id)
);
CREATE INDEX ON og.phones(user_id_fk);
CREATE TABLE IF NOT EXISTS og.phone_details
(    id serial UNIQUE,
    phone_id_fk integer REFERENCES og.phones(id) ON DELETE CASCADE NOT NULL,
    condition character varying(400),
    damage character varying(400),
    photo_urls TEXT[], 
    color character varying(15),
    storage smallint,
    battery smallint,
    charger boolean,
    cord boolean,
    body smallint,
    screen smallint,
    cam smallint,
    buttons smallint,
    wifi smallint,
    bluetooth smallint,
    front_cam smallint,
    replacements character varying(51),
    ship_from character varying(8),
    free_shipping boolean DEFAULT false,
    
    PRIMARY KEY (id)
);
CREATE INDEX ON og.phone_details (phone_id_fk);

CREATE TABLE IF NOT EXISTS og.user_details
(
    email character varying(38) NOT NULL UNIQUE,
    user_id_fk integer REFERENCES og.users(id) ON DELETE CASCADE NOT NULL,
    add1 character varying(40),
    add2 character varying(40),
    iso_31662 character varying(7),
    zip_code character varying(10),
    phone character varying(15),
    avatar_url character varying(40),
    PRIMARY KEY (email, user_id_fk)
);


CREATE TABLE IF NOT EXISTS og.auth
(
    password_salt character varying(100),
    email_fk character varying(38) REFERENCES og.user_details(email) ON DELETE CASCADE NOT NULL,
    salt character varying(13),
    PRIMARY KEY (email_fk)
);

CREATE TABLE IF NOT EXISTS og.auth_status
(
    verified_email boolean DEFAULT false,
    user_id_fk integer REFERENCES og.users(id) ON DELETE CASCADE NOT NULL,
    verified_phone boolean DEFAULT false,
    verified_user_id boolean DEFAULT false,
    user_status smallint,
    is_arbiter boolean default false,
    is_seller boolean default false,
    is_staff_admin boolean default false,
    PRIMARY KEY (user_id_fk)
);

CREATE TABLE IF NOT EXISTS og.hot_phones
(
    phone_id_fk integer,
    id smallint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.hot_androids
(
    android_id_fk integer,
    PRIMARY KEY (android_id_fk)
);

-- CREATE TABLE IF NOT EXISTS og.hot_phones
-- (
--     phone_id_fk integer,
--     PRIMARY KEY (phone_id_fk)
-- );

CREATE TABLE IF NOT EXISTS og.token
(
    user_id_fk integer references og.users(id) ON DELETE CASCADE NOT NULL,
    arbiter_hash character varying(11),
    seller_hash character varying(11),
    buyer_hash character varying(11),
    staff_hash character varying(11),
    admin_hash character varying(11),
    critical_errors smallint,
    last_update_at date,
    next_reset_at date,
    PRIMARY KEY (user_id_fk)
);



CREATE TABLE IF NOT EXISTS og.posts
(
    id serial UNIQUE,
    title character varying(25) NOT NULL,
    phone_id_fk integer NULL,
    product_id_fk integer NULL,
    dispute_id_fk integer NULL,
    phone_type smallint NULL,
    author_user_id_fk integer references og.users (id) ON DELETE CASCADE NOT NULL,
    receiver_user_id_fk integer references og.users (id) ON DELETE CASCADE NOT NULL,
    created_by date NOT NULL,
    PRIMARY KEY (id)
);
CREATE INDEX ON og.posts (author_user_id_fk);
CREATE INDEX ON og.posts (receiver_user_id_fk);

CREATE TABLE IF NOT EXISTS og.comments
(
    id serial UNIQUE,
    commenter_id_fk integer NOT NULL,
    message character varying(300),
    photo_url character varying(40),
    created_by date NOT NULL,
    post_id_fk integer references og.posts(id) ON DELETE CASCADE NULL,
    PRIMARY KEY ( id)
);
CREATE INDEX ON og.comments (post_id_fk);

CREATE TABLE IF NOT EXISTS og.saved_phones
(
    id serial,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    phone_id_fk integer,
    PRIMARY KEY (id)
);

CREATE INDEX ON og.saved_phones (user_id_fk);

CREATE TABLE IF NOT EXISTS og.purchase_offers
(
    id serial UNIQUE,
    buyer_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    phone_id_fk integer REFERENCES og.phones (id) ON DELETE CASCADE NOT NULL,
    product_id_fk integer,
    created_at date NOT NULL DEFAULT CURRENT_DATE,
    status smallint,
    seller_did_read boolean,
    arbiter1_user_id_fk integer,
    arbiter2_user_id_fk integer,
    arbiter3_user_id_fk integer,
    arbiter4_user_id_fk integer,
    arbiter5_user_id_fk integer,
    arbiter6_user_id_fk integer,
    accepted_arbiter_positions smallint,
    accepted_arbiter_status smallint,
    PRIMARY KEY (id )
);
CREATE INDEX ON og.purchase_offers (buyer_user_id_fk);

CREATE TABLE IF NOT EXISTS og.user_ratings
(   id serial NOT NULL,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    user_rating smallint,
    last_seen date,
    selling_transaction_num smallint,
    reject_buyer_num smallint,
    average_value_num smallint,
    arbiter_dispute_num smallint,
    avg_reply_time date,
    PRIMARY KEY (id)
);
CREATE INDEX ON og.user_ratings (user_id_fk);

CREATE TABLE IF NOT EXISTS og.user_reviews
(
    id serial NOT NULL,
    reviewee_user_id integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    author_user_id integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    author_name character varying(15) NOT NULL,
    stars smallint NOT NULL,
    comment character varying(250) NOT NULL,
    created_by date,
    phone_id_fk integer,
    android_id_fk integer,
    price integer,
    PRIMARY KEY (id)
);
CREATE INDEX ON og.user_reviews (reviewee_user_id);

CREATE TABLE IF NOT EXISTS og.user_notifications
(
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    offers smallint,
    purchases smallint,
    accepts smallint,
    messages smallint,
    reject_offers smallint,
    system_notes smallint,
    urgent_notes smallint,
    dispute_updates smallint,
    payment_updates smallint,
    dispute_requests smallint,
    dispute_rejections smallint,
    PRIMARY KEY (user_id_fk)
);



CREATE TABLE IF NOT EXISTS og.payments
(
    id serial UNIQUE NOT NULL,
    purchase_offer_id_fk integer NULL,
    status smallint,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE, 
    payment_source smallint NOT NULL,-- Payment Gateway (e.g., 1 = Stripe, 2 = PayPal, etc.)
    verifier_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NULL,
    payment_reference character varying(25),
    payment_record character varying(40),
    verifier_read_at date,
    release_date date,
    verifier_status smallint,
    staff_id_fk integer,
    amount_paid numeric NULL,
    photo_url VARCHAR(70) NOT NULL UNIQUE,
    photo_url2 VARCHAR(70) NULL UNIQUE,
    type smallint,  -- Payment Type (e.g., 1 = Product Purchase, 2 = Dispute Resolution, etc.)
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.disputes
(
    id serial NOT NULL UNIQUE,
    payment_id_fk integer REFERENCES og.payments(id) ON DELETE CASCADE NOT NULL,
    arbiter_user_id_fk integer NULL,
    status smallint NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    final_comment character varying(600),
    compensation integer,
    did_appeal boolean NOT NULL,
    buyer_status smallint,
    photo_url1 VARCHAR(50),
    photo_url2 VARCHAR(50),
    photo_url3 VARCHAR(50),
    dispute_text character varying(600),
    author_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    author_role VARCHAR(6) CHECK (author_role IN ('buyer', 'seller')),
    PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS og.dispute_comments
(
    id serial,
    commenter_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL    ,
    message character varying(300),
    photo_url VARCHAR(40),
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    parent_comment_id integer,
    dispute_id_fk integer REFERENCES og.disputes(id) ON DELETE CASCADE NOT NULL,
    sender_role character varying(8) CHECK (sender_role IN ('buyer', 'seller', 'arbiter')),
    recipient_role character varying(8)  CHECK (recipient_role IN ('buyer', 'seller', 'arbiter')),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.shipments
(
    id serial,
    shipping_id character varying(30),
    est_arrival_day smallint,
    seller_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    buyer_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    ship_at date,
    carrier character varying(15),
    ship_from character varying(60),
    ship_to character varying(60),
    purchase_offer_id_fk integer REFERENCES og.purchase_offers(id) ON DELETE CASCADE NOT NULL,
    photo1_url character varying(20),
    photo2_url character varying(20),
    photo3_url character varying(20),
    PRIMARY KEY (id)
);
CREATE INDEX ON  og.shipments (purchase_offer_id_fk);
CREATE TABLE IF NOT EXISTS og.arbiter_buyer_reviews
(
    id serial NOT NULL,
    arbiter_user_id_fk integer NOT NULL,
    buyer_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    review character varying(200) NOT NULL,
    rating smallint NOT NULL,
    dispute_id_fk integer NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.arbiter_seller_reviews
(
    id serial NOT NULL,
    arbiter_user_id_fk integer NOT NULL,
    seller_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    review character varying(200) NOT NULL,
    rating smallint NOT NULL,
    dispute_id_fk integer NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.buyer_arbiter_reviews
(
    id serial NOT NULL,
    arbiter_user_id_fk integer NOT NULL,
    buyer_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    review character varying(200) NOT NULL,
    rating smallint NOT NULL,
    dispute_id_fk integer NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.seller_arbiter_reviews
(
    id serial NOT NULL,
    arbiter_user_id_fk integer NOT NULL,
    seller_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    review character varying(200) NOT NULL,
    rating smallint NOT NULL,
    dispute_id_fk integer NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.arbiter_profiles
(    id serial NOT NULL UNIQUE,
    arbiter_user_id_fk integer REFERENCES og.users(id) ON DELETE CASCADE NOT NULL,
    status smallint NOT NULL,
    total_resolved_disputes smallint,
    last_logged_in date NOT NULL,
    intro character varying(200),
    country character varying(8),
    charge_fee smallint,
    arbiter_name character varying(15),
    overall_rating smallint,
    pin_seller_review_id integer,
    pin_buyer_review_id integer,
    recent_seller_review_id integer,
    recent_buyer_review_id integer,
    pin_seller_review character varying(200),
    pin_buyer_review character varying(200),
    recent_seller_review character varying(200),
    recent_buyer_review character varying(200),
    PRIMARY KEY (id)
);

CREATE INDEX ON  og.arbiter_profiles (arbiter_user_id_fk);

CREATE TABLE IF NOT EXISTS og.staffs
(
    id serial NOT NULL UNIQUE,
    transfer_officer boolean NOT NULL,
    name character varying(20),
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    status smallint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.payment_to_users
(
    id integer NOT NULL,
    staff_id_fk integer NOT NULL,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL ,
    amount numeric NOT NULL,
    payment_date date,
    currency character varying(5),
    dispute_id_fk integer,
    bank_reference character varying(20),
    bank_source character varying(20),
    payment_id_fk integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.user_accounts
(
     id serial,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    balance numeric,
    last_payment_date date,
    bank_name character varying(20),
    bank_number character varying(25),
    bank_code character varying(25),
    bank_address1 character varying(20),
    bank_address2 character varying(20),
    bank_country_iso_3166 character varying(10),
    stripe_payout_account_id character varying(40) NULL,
    status smallint,
    PRIMARY KEY (id)
);

CREATE INDEX ON  og.user_accounts (user_id_fk);

CREATE TABLE IF NOT EXISTS og.admin_balances
(
    id boolean,
    balance numeric,
    updated_at DATE NOT NULL DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.fee_rules
(  
    fee_rules boolean,
    arbiter_percentage_fee smallint,
    arbiter_fixed_fee integer,
    PRIMARY KEY (fee_rules)
);

CREATE TABLE IF NOT EXISTS og.arbiter_transactions
(
    id serial,
    fee numeric(5, 2) NOT NULL,
    purchase_offer_id_fk integer REFERENCES og.purchase_offers (id) ON DELETE CASCADE NOT NULL,
    status smallint NOT NULL,   
    arbiter_user_id_fk integer NOT NULL,
    plaintiff_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    created_at DATE NOT NULL DEFAULT CURRENT_DATE,
    staff_id_fk integer,
    payment_reference character varying(20),
    payment_photo_url character varying(20),
    our_bank_reference character varying(20),
    our_bank_code character varying(20),
    payment_bank character varying(20),
    plaintiff_is_buyer boolean NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.staff_notifications
(   id serial NOT NULL UNIQUE,
    staff_id_fk integer REFERENCES og.staffs (id) ON DELETE CASCADE NOT NULL,
    unverified_payments smallint,
    unverified_arbiter_transactions smallint,
    unforwarded_payments smallint,
    urgent_payments smallint,
    urgent_transactions smallint,
    PRIMARY KEY (id)
);
CREATE INDEX ON  og.staff_notifications (staff_id_fk);

CREATE TABLE IF NOT EXISTS og.arbiter_notifications
(   id serial NOT NULL UNIQUE,
    arbiter_user_id integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    unresolved_disputes smallint NOT NULL,
    new_disputes smallint,
    dispute_new_comments smallint,
    waiting_response_disputes smallint,
    urgent_disputes smallint NOT NULL,
    PRIMARY KEY (id)
);

CREATE INDEX ON  og.arbiter_notifications (arbiter_user_id);

CREATE TABLE IF NOT EXISTS og.report_users
(   id serial NOT NULL UNIQUE,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    report_num smallint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.phone_reports
(    id serial NOT NULL UNIQUE,
    phone_id_fk integer REFERENCES og.phones (id) ON DELETE CASCADE NOT NULL,
    reporter_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL ,
    PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS og.arbiter_candidates
(
    id serial NOT NULL UNIQUE,
    arbiter_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    payment_id_fk integer REFERENCES og.payments(id) ON DELETE CASCADE NOT NULL,
    PRIMARY KEY (id)
);



CREATE TABLE IF NOT EXISTS og.purchase_offers
(
    id serial UNIQUE,
    buyer_user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL,
    phone_id_fk integer REFERENCES og.phones (id) ON DELETE CASCADE,
    product_id_fk integer NULL,
    created_at date NOT NULL DEFAULT CURRENT_DATE,
    status smallint,
    seller_did_read boolean,
    arbiter1_user_id_fk integer,
    arbiter2_user_id_fk integer,
    arbiter3_user_id_fk integer,
    arbiter4_user_id_fk integer,
    arbiter5_user_id_fk integer,
    arbiter6_user_id_fk integer,
    accepted_arbiter_positions smallint,
    accepted_arbiter_status smallint,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.payment_intents
(
 
    id serial,
    payment_id_fk integer REFERENCES og.payments (id) ON DELETE CASCADE, -- Foreign key to og.payments (can be NULL initially)
    payment_gateway character varying(50) NOT NULL CHECK (payment_gateway IN ('stripe', 'zelle', 'venmo', 'other')),
    intent_type character varying(50)  NOT NULL,                      -- Type of intent (e.g., 'purchase', 'dispute_fee', 'refund', 'return')
    status character varying(50)  NULL,                                -- Status of the Payment Intent (e.g., 'pending', 'succeeded', 'requires_action', 'failed')
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    transaction_record VARCHAR(100) NULL UNIQUE, 
    payment_reference VARCHAR(100) NULL, 
    transaction_record_url VARCHAR(100) NOT NULL UNIQUE,
    gateway_payment_intent_id VARCHAR(255) NOT NULL UNIQUE, -- Gateway Payment Intent ID (e.g., Stripe Payment Intent ID, Venmo Transaction ID) - must be unique
    purchase_offer_id_fk integer REFERENCES og.purchase_offers(id) ON DELETE CASCADE NOT NULL,
    payment_intent_record_key UUID NOT NULL UNIQUE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS og.stripe_accounts
(
    id serial,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL UNIQUE, -- Foreign key to og.users (one-to-one relationship)
    stripe_account_id character varying(255)  NOT NULL UNIQUE,          -- Stripe Account ID (e.g., 'acct_xxxxxxxxxxxxx') - must be unique
    account_status VARCHAR(50) NULL,                           -- Status of the Stripe Account (e.g., 'pending', 'verified', 'restricted', 'closed')
    account_type VARCHAR(50) NOT NULL,                           -- Type of Stripe Account (e.g., 'seller_payout', 'arbiter_payout', 'company_platform') - to differentiate account usage
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE INDEX ON  og.stripe_accounts (user_id_fk);

CREATE TABLE IF NOT EXISTS og.venmo_accounts
(
    id serial,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL UNIQUE, -- Foreign key to og.users (one-to-one relationship)
    venmo_account_id VARCHAR(255) NOT NULL UNIQUE,          -- Venmo Account ID (e.g., Venmo username or unique identifier) - must be unique
    account_status VARCHAR(50) NULL,                           -- Status of the Venmo Account (e.g., 'pending_verification', 'active', 'inactive', 'error')
    account_type VARCHAR(50) NOT NULL,                           -- Type of Venmo Account (e.g., 'seller_payout', 'buyer_payment') - to differentiate account usage if needed
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE INDEX ON og.venmo_accounts (user_id_fk);

CREATE TABLE IF NOT EXISTS og.zelle_accounts
(
    id serial,
    user_id_fk integer REFERENCES og.users (id) ON DELETE CASCADE NOT NULL UNIQUE, -- Foreign key to og.users (one-to-one relationship)
    zelle_account_id VARCHAR(255) NOT NULL UNIQUE,          -- Zelle Account ID (e.g., email or phone number) - must be unique
    account_status VARCHAR(50) NULL,                           -- Status of the Zelle Account (e.g., 'active', 'inactive', 'pending_verification', 'error')
    account_type VARCHAR(50) NOT NULL,                           -- Type of Zelle Account (e.g., 'seller_payout', 'buyer_payment') - to differentiate account usage if needed
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE INDEX ON og.zelle_accounts (user_id_fk);



-- Explanation:
-- CREATE TABLE IF NOT EXISTS og.payment_intents: Creates a new table named 'og.payment_intents' if it doesn't already exist.
-- id serial PRIMARY KEY:  Standard auto-incrementing primary key.
-- payment_id_fk integer REFERENCES og.payments (id) NULL:
--    - Foreign key referencing the 'id' column of the 'og.payments' table.
--    - Establishes a relationship between Payment Intents and Payments.
--    - NULL is allowed initially because a Payment Intent might be created *before* a full 'og.payments' record exists in some scenarios, or if you want to decouple creation slightly.
-- stripe_payment_intent_id VARCHAR(255) NOT NULL UNIQUE:
--    - Stores the actual Stripe Payment Intent ID.
--    - VARCHAR(255) data type (adjust if needed).
--    - NOT NULL and UNIQUE constraints ensure that this column always has a value and that each Stripe Payment Intent ID is unique in this table.
-- intent_type VARCHAR(50) NOT NULL:
--    - Indicates the purpose of the Payment Intent (e.g., 'purchase' for initial payment, 'dispute_fee' for dispute service fee).
--    - VARCHAR(50) data type (consider using ENUM for predefined types if you have a fixed list).
--    - NOT NULL as the intent type should always be specified.
-- status VARCHAR(50) NULL:
--    - Tracks the status of the Stripe Payment Intent (e.g., 'pending', 'succeeded', 'requires_action', 'failed').
--    - VARCHAR(50) data type (or ENUM for predefined statuses).
--    - NULL initially and updated as the Payment Intent progresses through its lifecycle.
-- created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP: Timestamp for when the record was created.
-- updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP: Timestamp for when the record was last updated.  Consider adding an `ON UPDATE CURRENT_TIMESTAMP` trigger if your database system supports it to automatically update this on each row update.

-- Indexing (Optional but Recommended):
-- CREATE INDEX idx_payment_intents_stripe_payment_intent_id ON og.payment_intents (stripe_payment_intent_id);
-- CREATE INDEX idx_payment_intents_payment_id_fk ON og.payment_intents (payment_id_fk);


CREATE INDEX ON  og.report_users (user_id_fk);
CREATE INDEX ON  og.phone_reports (phone_id_fk);

CREATE INDEX ON og.purchase_offers (buyer_user_id_fk); 

CREATE INDEX ON og.shipments (purchase_offer_id_fk); 

CREATE INDEX ON og.dispute_comments (dispute_id_fk); 
CREATE INDEX ON og.arbiter_candidates (payment_id_fk);

CREATE INDEX ON og.phones (model);
CREATE INDEX ON og.phones (carrier); 

END;

-- CREATE TABLE IF NOT EXISTS og.item_reports
-- (
--     item_id_fk integer NOT NULL,
--     reporter_user_id_fk integer REFERENCES og.users (id) NOT NULL,
--     PRIMARY KEY (phone_id_fk)
-- );



-- CREATE TABLE IF NOT EXISTS og.android_reports
-- (
--     android_id_fk integer NOT NULL,
--     reporter_user_id_fk integer REFERENCES og.users (id) NOT NULL,
--     PRIMARY KEY (phone_id_fk)
-- );
